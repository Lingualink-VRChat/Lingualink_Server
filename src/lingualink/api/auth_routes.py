from fastapi import APIRouter, HTTPException, Depends
from typing import Optional
import logging

from ..models.auth_models import AuthResponse, TokenAuth
from ..auth.auth_service import auth_service
from ..auth.dependencies import get_current_api_key
from config.settings import settings

logger = logging.getLogger(__name__)

router = APIRouter(prefix="/api/v1/auth", tags=["authentication"])


@router.post(
    "/generate_key",
    response_model=dict,
    summary="生成API密钥",
    description="生成新的API密钥（需要现有有效密钥）"
)
async def generate_api_key(
    name: Optional[str] = None,
    expires_in_days: Optional[int] = None,
    current_api_key: str = Depends(get_current_api_key)
):
    """
    生成新的API密钥
    
    - **name**: 密钥名称（可选）
    - **expires_in_days**: 过期天数（可选，不设置则永不过期）
    """
    try:
        new_api_key = auth_service.generate_api_key(name, expires_in_days)
        
        logger.info(f"New API key generated by {current_api_key[:8]}...")
        
        return {
            "status": "success",
            "message": "API key generated successfully",
            "data": {
                "api_key": new_api_key,
                "name": name or f"key_{new_api_key[:8]}",
                "expires_in_days": expires_in_days
            }
        }
    except Exception as e:
        logger.error(f"Error generating API key: {e}")
        raise HTTPException(
            status_code=500,
            detail={
                "status": "error",
                "message": f"Failed to generate API key: {str(e)}"
            }
        )


@router.get(
    "/keys",
    summary="列出API密钥",
    description="列出所有API密钥信息（不包含密钥本身）"
)
async def list_api_keys(current_api_key: str = Depends(get_current_api_key)):
    """列出所有API密钥信息"""
    try:
        keys_info = auth_service.list_api_keys()
        
        return {
            "status": "success",
            "data": {
                "keys": keys_info,
                "total": len(keys_info)
            }
        }
    except Exception as e:
        logger.error(f"Error listing API keys: {e}")
        raise HTTPException(
            status_code=500,
            detail={
                "status": "error",
                "message": f"Failed to list API keys: {str(e)}"
            }
        )


@router.post(
    "/revoke_key",
    summary="撤销API密钥",
    description="撤销指定的API密钥"
)
async def revoke_api_key(
    api_key_to_revoke: str,
    current_api_key: str = Depends(get_current_api_key)
):
    """
    撤销API密钥
    
    - **api_key_to_revoke**: 要撤销的API密钥
    """
    try:
        # 防止撤销自己当前使用的密钥
        if api_key_to_revoke == current_api_key:
            raise HTTPException(
                status_code=400,
                detail={
                    "status": "error",
                    "message": "Cannot revoke the API key currently in use"
                }
            )
        
        success = auth_service.revoke_api_key(api_key_to_revoke)
        
        if success:
            logger.info(f"API key revoked by {current_api_key[:8]}...")
            return {
                "status": "success",
                "message": "API key revoked successfully"
            }
        else:
            raise HTTPException(
                status_code=404,
                detail={
                    "status": "error",
                    "message": "API key not found"
                }
            )
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error revoking API key: {e}")
        raise HTTPException(
            status_code=500,
            detail={
                "status": "error",
                "message": f"Failed to revoke API key: {str(e)}"
            }
        )


@router.get(
    "/verify",
    summary="验证API密钥",
    description="验证当前API密钥的有效性"
)
async def verify_current_key(current_api_key: str = Depends(get_current_api_key)):
    """验证当前API密钥"""
    try:
        key_info = auth_service.get_key_info(current_api_key)
        
        if key_info:
            return {
                "status": "success",
                "message": "API key is valid",
                "data": {
                    "name": key_info["name"],
                    "created_at": key_info["created_at"],
                    "expires_at": key_info["expires_at"],
                    "usage_count": key_info["usage_count"],
                    "is_active": key_info["is_active"]
                }
            }
        else:
            return {
                "status": "success",
                "message": "Authentication disabled",
                "data": {"auth_enabled": False}
            }
    except Exception as e:
        logger.error(f"Error verifying API key: {e}")
        raise HTTPException(
            status_code=500,
            detail={
                "status": "error",
                "message": f"Failed to verify API key: {str(e)}"
            }
        ) 