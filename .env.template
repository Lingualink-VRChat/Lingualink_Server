# =============================================================================
# Lingualink Server 配置文件模板
# 复制此文件为 .env 并根据需要修改配置
# 
# 💡 负载均衡模式说明:
# 1. 传统单后端模式 (默认): 只配置下面的 VLLM_SERVER_URL 等基本参数
# 2. 多后端负载均衡模式: 配置 LLM_BACKENDS 参数 (JSON格式)
# 3. 显式控制模式: 使用 LOAD_BALANCE_ENABLED 强制启用/禁用负载均衡
# =============================================================================

# 服务器配置
# -----------------------------------------------------------------------------
HOST=0.0.0.0
PORT=5000
DEBUG=false

# LLM 服务配置 (必须配置)
# -----------------------------------------------------------------------------
# 📝 单后端模式配置 (向后兼容，推荐新手使用)
# 如果你只有一个LLM后端，只需配置下面三项即可

# vLLM 服务器地址 - 请修改为你的实际地址
VLLM_SERVER_URL=http://192.168.8.6:8000

# 模型名称 - 请修改为你的实际模型名
MODEL_NAME=qwenOmni7

# LLM API 密钥 - 请修改为你的实际密钥
API_KEY=abc123

# 🚀 多LLM后端配置 (高级功能，支持负载均衡)
# -----------------------------------------------------------------------------
# 如果你有多个LLM后端，配置此项可启用负载均衡功能
# 配置后系统将自动启用负载均衡，支持故障转移、健康检查等功能

# 多后端配置示例 (JSON格式，取消注释并修改后使用):
# LLM_BACKENDS='[
#   {
#     "name": "primary",                          # 后端名称 (必须唯一)
#     "url": "http://192.168.8.6:8000",          # 后端服务器地址
#     "model_name": "qwenOmni7",                  # 使用的模型名称
#     "api_key": "abc123",                        # 后端API密钥
#     "weight": 3,                                # 权重 (数值越大分配请求越多)
#     "max_connections": 50,                      # 最大并发连接数
#     "timeout": 30.0,                            # 请求超时时间 (秒)
#     "priority": 0,                              # 优先级 (数值越小优先级越高)
#     "tags": ["primary", "fast"]                 # 标签 (用于分类管理) 
#   },
#   {
#     "name": "backup",
#     "url": "http://192.168.8.7:8000",
#     "model_name": "qwenOmni7",
#     "api_key": "def456",
#     "weight": 1,
#     "max_connections": 30,
#     "timeout": 35.0,
#     "priority": 1,
#     "tags": ["backup", "stable"]
#   }
# ]'

# 💡 快速多后端配置模板 (复制并修改):
# LLM_BACKENDS='[{"name":"backend1","url":"http://192.168.8.6:8000","model_name":"qwenOmni7","api_key":"key1","weight":2},{"name":"backend2","url":"http://192.168.8.7:8000","model_name":"qwenOmni7","api_key":"key2","weight":1}]'

# 📋 常见配置场景示例:
# 
# 🎯 场景1: 开发环境 (最简单)
# VLLM_SERVER_URL=http://localhost:8000
# MODEL_NAME=qwenOmni7
# API_KEY=your-key
# 
# 🎯 场景2: 生产环境 (单后端)
# VLLM_SERVER_URL=http://llm-server.internal:8000
# MODEL_NAME=qwenOmni7
# API_KEY=prod-key
# LOAD_BALANCE_ENABLED=true  # 启用健康检查等功能
# 
# 🎯 场景3: 高可用环境 (多后端)
# LLM_BACKENDS='[{"name":"primary","url":"http://llm-1:8000","model_name":"qwenOmni7","api_key":"key1","weight":3},{"name":"backup","url":"http://llm-2:8000","model_name":"qwenOmni7","api_key":"key2","weight":1}]'
# LOAD_BALANCE_STRATEGY=weighted_round_robin

# ⚖️ 负载均衡策略配置
# -----------------------------------------------------------------------------
# 负载均衡总开关 (可选配置)
# 🔧 智能模式: 不设置此参数，系统自动判断
#    - 配置了多个后端时自动启用负载均衡
#    - 只有单后端时使用传统模式 (性能最佳)
# 🔧 强制模式: 显式控制负载均衡
#    - true: 强制启用负载均衡 (即使只有一个后端)
#    - false: 强制禁用负载均衡 (即使配置了多个后端)
# LOAD_BALANCE_ENABLED=true

# 负载均衡算法选择
# round_robin: 轮询 (默认，简单均匀分配)
# weighted_round_robin: 加权轮询 (根据weight参数分配)
# least_connections: 最少连接数 (优先选择连接数少的后端)
# random: 随机 (随机选择后端)
# consistent_hash: 一致性哈希 (相同请求路由到相同后端)
# response_time: 响应时间最优 (优先选择响应快的后端)
LOAD_BALANCE_STRATEGY=round_robin

# 健康检查配置
HEALTH_CHECK_INTERVAL=30.0    # 健康检查间隔 (秒)
MAX_RETRIES=2                 # 请求失败时的最大重试次数
FAILURE_THRESHOLD=3           # 连续失败多少次后标记为不健康

# 文件上传配置
# -----------------------------------------------------------------------------
# 最大上传文件大小 (字节，32MB以支持更大音频文件)
MAX_UPLOAD_SIZE=33554432

# 允许的文件扩展名
ALLOWED_EXTENSIONS=["wav", "opus", "mp3", "flac", "m4a", "aac", "ogg"]

# 音频转换性能配置 (新增)
# -----------------------------------------------------------------------------
# 最大同时进行的音频转换数量 (建议: CPU核心数 * 2)
# 对于50并发用户建议设置为16-20
MAX_CONCURRENT_AUDIO_CONVERSIONS=16

# 音频转换器线程池大小 (建议: CPU核心数)
# 根据你的服务器CPU核心数调整，8核心建议设置为8
AUDIO_CONVERTER_WORKERS=8

# 鉴权配置
# -----------------------------------------------------------------------------
# 是否启用鉴权
AUTH_ENABLED=true

# 应用内部加密密钥 (非常重要！请生成强密钥)
SECRET_KEY=your-secret-key-change-this

# 访问令牌过期时间 (分钟)
ACCESS_TOKEN_EXPIRE_MINUTES=30

# Redis缓存配置
# -----------------------------------------------------------------------------
# 是否启用Redis缓存 (提升API密钥验证性能)
REDIS_ENABLED=True

# Redis连接URL
# 格式: redis://[:password@]host[:port][/database]
# 无密码: redis://localhost:6379/0
# 有密码: redis://:password@localhost:6379/0
REDIS_URL=redis://:redis_5Rc6hK@localhost:6379/0

# API密钥缓存过期时间 (秒，默认5分钟)
API_KEY_CACHE_TTL=300

# 数据库配置
# -----------------------------------------------------------------------------
# API密钥数据库路径
DATABASE_PATH=data/api_keys.db

# 默认语言配置
# -----------------------------------------------------------------------------
# 默认目标语言
DEFAULT_TARGET_LANGUAGES=["英文", "日文"]

# 默认用户查询
DEFAULT_USER_QUERY=请处理下面的音频。

# =============================================================================
# 📖 重要说明和快速开始:
#
# 🚀 1. 快速开始 (单后端模式):
#    - 只需配置 VLLM_SERVER_URL, MODEL_NAME, API_KEY 三项
#    - 生成第一个API密钥: python3 manage_api_keys.py --local generate --name "admin-key"
#    - 启动服务: python3 manage.py start
#
# ⚖️ 2. 负载均衡模式 (多后端):
#    - 配置 LLM_BACKENDS 参数 (JSON格式)
#    - 选择负载均衡策略: LOAD_BALANCE_STRATEGY
#    - 查看状态: python3 manage_load_balancer.py --api-key <key> status
#
# 🎯 3. 性能调优建议:
#    - MAX_CONCURRENT_AUDIO_CONVERSIONS: 设置为 CPU核心数 * 2
#    - AUDIO_CONVERTER_WORKERS: 设置为 CPU核心数
#    - 对于50并发用户，建议至少16核心的服务器
#
# 🔧 4. 系统要求:
#    - 确保已安装 FFmpeg 和 OPUS 支持
#    - 运行: ./scripts/install_audio_deps.sh
#
# 📊 5. 监控端点:
#    - 健康检查: GET /api/v1/health
#    - 性能监控: GET /api/v1/performance
#    - 负载均衡状态: GET /api/v1/load_balancer/status
#    - 后端指标: GET /api/v1/load_balancer/backends
#
# 📚 6. 详细文档:
#    - 负载均衡配置: docs/load_balancer_config.md
#    - API文档: http://localhost:5000/docs (启动服务后访问)
# ============================================================================= 